const fs = require("fs");
const path = require("path");
const axios = require("axios");

module.exports.config = {
  name: "bdnews",
  version: "1.1.1",
  hasPermssion: 0,
  credits: "nayan",
  description: "‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ‡¶¶‡ßá‡¶∂ ‡¶∏‡¶Ç‡¶¨‡¶æ‡¶¶ ‡¶¶‡ßá‡¶ñ‡¶æ‡ßü (‡¶ï‡¶æ‡¶∏‡ßç‡¶ü‡¶Æ query ‡¶è‡¶¨‡¶Ç category ‡¶∏‡¶π)",
  commandCategory: "News",
  usages: "/bdnews [query] [category] (‡¶â‡¶¶‡¶æ‡¶π‡¶∞‡¶£: /bdnews ‡¶ñ‡ßá‡¶≤‡¶æ‡¶ß‡ßÅ‡¶≤‡¶æ top)",
  cooldowns: 5,
  dependencies: {
    "axios": ""
  }
};

module.exports.run = async function ({ event, api, args }) {
  const { threadID, messageID } = event;

  if (args.length < 2) {
    return api.sendMessage("‡¶¶‡ßü‡¶æ ‡¶ï‡¶∞‡ßá query ‡¶è‡¶¨‡¶Ç category ‡¶¶‡¶ø‡¶®‡•§\n‡¶â‡¶¶‡¶æ‡¶π‡¶∞‡¶£: /bdnews ‡¶ñ‡ßá‡¶≤‡¶æ‡¶ß‡ßÅ‡¶≤‡¶æ top", threadID, messageID);
  }

  const query = args[0];
  const category = args[1];

  try {
    const response = await axios.get("https://rubish-apihub.onrender.com/rubish//bdnews", {
      params: {
        query: query,
        category: category,
        apikey: "rubish69"
      }
    });

    const articles = response.data.results;
    if (!articles || articles.length === 0) {
      return api.sendMessage(`"${query}" ‡¶ï‡ßç‡¶Ø‡¶æ‡¶ü‡ßá‡¶ó‡¶∞‡¶ø‡¶∞ ‡¶ï‡ßã‡¶®‡ßã ‡¶∏‡¶Ç‡¶¨‡¶æ‡¶¶ ‡¶™‡¶æ‡¶ì‡ßü‡¶æ ‡¶Ø‡¶æ‡ßü‡¶®‡¶ø‡•§`, threadID, messageID);
    }

    let listMessage = `üì∞ "${query}" ‡¶ï‡ßç‡¶Ø‡¶æ‡¶ü‡ßá‡¶ó‡¶∞‡¶ø‡¶∞ ‡¶∏‡¶Ç‡¶¨‡¶æ‡¶¶ ‡¶§‡¶æ‡¶≤‡¶ø‡¶ï‡¶æ:\n\n`;
    articles.forEach((article, index) => {
      listMessage += `${index + 1}. ${article.title}\n`;
    });
    listMessage += "\n\n‚û£ ‡¶¨‡¶ø‡¶∏‡ßç‡¶§‡¶æ‡¶∞‡¶ø‡¶§ ‡¶ú‡¶æ‡¶®‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶â‡¶™‡¶∞‡ßá‡¶∞ ‡¶§‡¶æ‡¶≤‡¶ø‡¶ï‡¶æ ‡¶•‡ßá‡¶ï‡ßá ‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ‡¶ü‡¶ø ‡¶∞‡¶ø‡¶™‡ßç‡¶≤‡¶æ‡¶á ‡¶ï‡¶∞‡ßÅ‡¶®‡•§";

    return api.sendMessage(listMessage, threadID, (err, info) => {
      global.client.handleReply.push({
        name: this.config.name,
        messageID: info.messageID,
        author: event.senderID,
        articles: articles
      });
    }, messageID);
  } catch (error) {
    console.error("BDNews API Error: ", error);
    return api.sendMessage("‡¶∏‡¶Ç‡¶¨‡¶æ‡¶¶ ‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶∏‡¶Æ‡ßü ‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø ‡¶ò‡¶ü‡ßá‡¶õ‡ßá‡•§", threadID, messageID);
  }
};

module.exports.handleReply = async function({ event, api, handleReply }) {
  const { threadID, messageID, body } = event;
  const selectedNumber = parseInt(body.trim());

  if (isNaN(selectedNumber)) {
    return api.sendMessage("‡¶∂‡ßÅ‡¶ß‡ßÅ‡¶Æ‡¶æ‡¶§‡ßç‡¶∞ ‡¶§‡¶æ‡¶≤‡¶ø‡¶ï‡¶æ‡¶∞ ‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ‡¶ü‡¶ø ‡¶≤‡¶ø‡¶ñ‡ßÅ‡¶®‡•§", threadID, messageID);
  }

  const index = selectedNumber - 1;
  const articles = handleReply.articles;
  if (index < 0 || index >= articles.length) {
    return api.sendMessage("‡¶∏‡¶†‡¶ø‡¶ï ‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ ‡¶™‡ßç‡¶∞‡¶¶‡¶æ‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®‡•§", threadID, messageID);
  }

  const article = articles[index];

  let detailMessage = `üì∞ ‡¶∂‡¶ø‡¶∞‡ßã‡¶®‡¶æ‡¶Æ: ${article.title}\n\n`;
  detailMessage += `üìù ‡¶¨‡¶ø‡¶¨‡¶∞‡¶£: ${article.description || "‡¶â‡¶™‡¶≤‡¶¨‡ßç‡¶ß ‡¶®‡ßü"}\n\n`;
  detailMessage += `üîó ‡¶â‡ßé‡¶∏: ${article.source_name || "‡¶â‡¶™‡¶≤‡¶¨‡ßç‡¶ß ‡¶®‡ßü"}\n`;
  detailMessage += `üìÖ ‡¶§‡¶æ‡¶∞‡¶ø‡¶ñ: ${article.pubDate || "‡¶â‡¶™‡¶≤‡¶¨‡ßç‡¶ß ‡¶®‡ßü"}\n`;
  detailMessage += `üîó ‡¶≤‡¶ø‡¶Ç‡¶ï: ${article.link || "‡¶â‡¶™‡¶≤‡¶¨‡ßç‡¶ß ‡¶®‡ßü"}`;

  // ‡¶Ø‡¶¶‡¶ø ‡¶õ‡¶¨‡¶ø‡¶∞ URL ‡¶•‡¶æ‡¶ï‡ßá
  if (article.image_url) {
    try {
      // ‡¶®‡¶ø‡¶∂‡ßç‡¶ö‡¶ø‡¶§ ‡¶ï‡¶∞‡ßÅ‡¶® ‡¶Ø‡ßá cache ‡¶´‡ßã‡¶≤‡ßç‡¶°‡¶æ‡¶∞ ‡¶Ü‡¶õ‡ßá, ‡¶®‡¶æ ‡¶•‡¶æ‡¶ï‡¶≤‡ßá ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡ßÅ‡¶®
      const cacheDir = path.join(__dirname, "cache");
      if (!fs.existsSync(cacheDir)) fs.mkdirSync(cacheDir);

      // ‡¶è‡¶ï‡¶ü‡¶ø ‡¶á‡¶â‡¶®‡¶ø‡¶ï ‡¶®‡¶æ‡¶Æ ‡¶∏‡¶π ‡¶´‡¶æ‡¶á‡¶≤ ‡¶™‡¶æ‡¶• ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡ßÅ‡¶®
      const filePath = path.join(cacheDir, `${Date.now()}.jpg`);

      // ‡¶õ‡¶¨‡¶ø ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡ßá ‡¶´‡¶æ‡¶á‡¶≤ ‡¶π‡¶ø‡¶∏‡ßá‡¶¨‡ßá ‡¶∏‡¶Ç‡¶∞‡¶ï‡ßç‡¶∑‡¶£ ‡¶ï‡¶∞‡¶æ
      const response = await axios({
        url: article.image_url,
        method: "GET",
        responseType: "stream"
      });
      const writer = fs.createWriteStream(filePath);
      response.data.pipe(writer);
      await new Promise((resolve, reject) => {
        writer.on("finish", resolve);
        writer.on("error", reject);
      });

      // ‡¶õ‡¶¨‡¶ø attachment ‡¶π‡¶ø‡¶∏‡ßá‡¶¨‡ßá ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã, ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã‡¶∞ ‡¶™‡¶∞ ‡¶´‡¶æ‡¶á‡¶≤‡¶ü‡¶ø ‡¶Æ‡ßÅ‡¶õ‡ßá ‡¶´‡ßá‡¶≤‡¶æ ‡¶π‡¶¨‡ßá
      return api.sendMessage({
        body: detailMessage,
        attachment: fs.createReadStream(filePath)
      }, threadID, messageID, (err, info) => {
        // ‡¶´‡¶æ‡¶á‡¶≤ ‡¶°‡¶ø‡¶≤‡¶ø‡¶ü ‡¶ï‡¶∞‡¶æ
        fs.unlink(filePath, (unlinkErr) => {
          if (unlinkErr) console.error("‡¶´‡¶æ‡¶á‡¶≤ ‡¶°‡¶ø‡¶≤‡¶ø‡¶ü ‡¶ï‡¶∞‡¶§‡ßá ‡¶¨‡ßç‡¶Ø‡¶∞‡ßç‡¶•:", filePath, unlinkErr);
        });
      });
    } catch (err) {
      console.error("‡¶õ‡¶¨‡¶ø ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶°/‡¶™‡ßç‡¶∞‡¶∏‡ßá‡¶∏‡¶ø‡¶Ç ‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø:", err);
      return api.sendMessage(detailMessage, threadID, messageID);
    }
  } else {
    return api.sendMessage(detailMessage, threadID, messageID);
  }
};
